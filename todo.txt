Сделать по SearchFSM:
+ Преобразование построенных таблиц автомата в формат, пригодный для тестирования
++ Преобразование таблицы выходов
+ Тестирование корректности работы битовых автоматов
+ Ускорение построения автомата при помощи хеширования состояний
+ Построение байтового автомата
+ Тестирование корректности работы байтовых автоматов
+ Оценка требуемого объёма памяти
- Сохранение таблиц в файл исходного кода
- Написать документацию на двух языках
- Оптимизация таблиц

Рефакторинг:
* Сделать шаблонный метод для измерения производительности различных поисковых машин.
++ Переделать на него все методы измерения скорости работы автоматов
+++ Сделать подробные вычисления потребностей в памяти
++ вынести методы анализа шаблонов
-- аналогично организовать тестирование корректности поиска
++ сделать в клиенте однообразный вывод результатов измерения скорости поисковых механизмов
** зачистить класс CFsmTest от всего лишнего
- Сделать "быстрый" регистр сдвига для коротких шаблонов
+ Перенести преобразование таблицы выходов в плоский вид в класс CFsmCreator (с одновременным
сохранением таблицы в QVector)
+ В класс CFsmTest добавить члены, описывающие строимый автомат, сделать его менее статическим.
+ В метод CFsmCreator::GenerateTables добавить параметр, отключающий отладочный вывод.
+ Переименовать SOutput::nPosition в nStepBack.
+ Параметр для типов полей выходов SOutput.
+ Загнать SOutput и пр. в файле "FsmCreator.h" внутрь класса CFsmCreator.

Исследовательская часть:
+ Написать простейший генератор псевдослучайной последовательности (ПСП) - пока используется ЛКГ
- Замерить время работы "простого" поиска, регистрового поиска и автоматного поиска на ПСП
- То же для нескольких шаблонов
- То же для относительно длинных шаблонов
- То же для неполностью определённых шаблонов
- То же для нечёткого поиска
Желательно иметь автоматы с объёмами таблиц, которые:
- Помещаются в высокоскоростной кэш процессора
- Помещаются в кэш второго уровня
- Помещаются в оперативную память
- Не помещаются в оперативную память
Использовать шаблоны длины меньше байта, байт ровно, несколько байтов и несколько байтов с частью
байта.
Поисковые системы: побитовый поиск, регистровый поиск (с разными способами вычисления веса вектора
разности); битовый, полубайтовый и байтовый автоматы
