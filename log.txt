09.05.2016
Started
Начал разработку класса CFsmCreator для создания таблиц переходов и выходов поискового автомата.

11,12.05.2016
Transition table creation code (only prints), dumping method
Доделал построение таблиц переходов автомата (они выводятся на экран, но не сохраняются).
Таблица выходов не строится, но выводятся звёздочки, по которым можно определить количество
найденных шаблонов.
Добавлены методы для получения определённого бита двоичной последовательности и вывода описания
состояний.
-
Testing code in main.cpp
Добавил тестирующий код в main.cpp.

19.05.2016
Refactoring: optional pattern mask, output fix
Сделал удобные функции для доступа к битам шаблонов и масок - теперь маску можно не задавать, если
все биты шаблона существенны.
Изменил вывод состояний: для перфиксов вообще без ошибок теперь нуль не пишется.
-
Renamed FSM/ to SearchFSM/
Переименовал папку с проектом в SearchFSM.
-
Structure for FSM tables
Создал структуры для таблиц автомата.
Каждая ячейка таблицы будет иметь номер следующего состояния для перехода и список найденных
шаблонов для выхода автомата.
Информация о найденном шаблоне содержит его номер, количество ошибок и отступ от текущей позиции
автомата (равную длине шаблона).

23.05.2016
FSM tables storing, print output
Сохранение таблиц при их генерации, запоминание выхода вместе с новым состоянием.
Вывод на экран выхода автомата при соответствующем переходе.

24.05.2016
Methods for accessing created table
Добавил в класс CFsmCreator методы GetStatesCount и GetTableRow для доступа к построенной таблице.

06.06.2016
Came to the natural bit order, comments on it
Сделал для шаблонов естественный порядок битов: первый бит в старшем разряде байта, если последний
байт неполный, то его значащими являются младшие биты (соответствующее количество).
Написал подробный комментарий об этом перед определением структуры SPattern.

08.06.2016
Translated README into Russian
Добавил языковые ссылки и перевёл скудное пока описание (README.md) на русский язык.

11.06.2016
Created CSearchFsm template class for searching FSMs themselves
Написал шаблонный класс CSearchFsm для реализации функциональности самого поискового автомата.
Параметрами шаблона являются типы индексов состояний и выходов - для больших возможностей сделать
таблицы компактнее при небольшом количестве состояний или выходов.
Структуры таблиц самого поискового автомата отличаются от структур в классе создания таблиц.
В тестовом клиенте (main.cpp) частично реализовал переработку таблиц класса-создателя в таблицы
поискового автомата - пока без таблиц выхода.

13.06.2016
fsm-test: Began creating CFsmTest - class for testing FSMs
Начал создавать класс для тестирования автоматов CFsmTest.
Пока сделал обёртку для таблиц автомата, содержащую указатели на таблицы и сами таблицы в членах
типа QVector<>.
Таблицы выходов пока не трогал.
-
fsm-test: CFsmTest traces FSM running
В класс CFsmTest добавлен член CFsmTest::TestFsm, который подаёт на вход автомата случайные биты и
выводит на экран последовательность состояний.
Перед запуском автомата на экран выводятся тестовые шаблоны (в main.cpp).
Далее планируется добавить вывод выходов автомата.
-
Plans in todo.txt
Создал файл todo.txt с планами дальнейшей работы.
-
fsm-test: Merged master

28.12.2016
New plans in todo.txt
Добавил в планы описание исследовательской части работы.

30.12.2016
Refactoring plans
После долгой разлуки взглянул на проект свежим взглядом - многое хочется переделать.
Описал планы по рефакторингу дальнейшему.
-
fsm-test: output table, refactoring
Добавил в тестирующий класс автомата сохранение таблицы выходов и её использование при тестовом
прогоне автомата.
Добавил typedef для нескольких типов.
-
Merge branch 'master' into fsm-test
Conflicts: log.txt

06.01.2017
Rafactoring: field names etc.
В файле SearchFSM/FsmCreator.h вспомогательные структуры и типы поместил внутрь описания класса
CFsmCreator.
Поле SOutput::nPosition переименовал в nStepBack, что лучше описывает его смысл.
Исправил одно предупреждение компилятора MinGW, связанное с беззнаковостью числа.
Для самого класса автомата сделал типы полей patternIdx, stepBack и errorsCount
параметризованными на всякий случай.
-
Optional debug output in CFsmCreator::GenerateTables
Добавил в метод CFsmCreator::GenerateTables параметр fVerbose, подключающий отладочный вывод
только при необходимости.
-
Refactored CFsmTest to store the FSM in the members
В класс CFsmTest добавил сам построенный автомат.
Автомат теперь строится полностью в методе CFsmTest::CreateFsm по шаблонам.
Вынес количество подаваемых битов в методе CFsmTest::TestFsm в параметр.
Добавил комментарии, повысил качество кода.
Устранил предупреждения компилятора.

09.01.2017
Linear congruent generator for testing, clean-up etc.
Добавил в класс CFsmTest ЛКГ для тестирования работы автоматов и других методов поиска шаблонов.
Пробросил параметр fVerbose в метод CFsmTest::CreateFsm.
Удалил лишний вывод в main.cpp, добавил комментарии.
-
Refactoring: CFsmTest::TraceFsm, output, etc.
Переименовал CFsmTest::TestFsm в TraceFsm.
Вынес обнуление переменной ПСП в метод ResetLCG().
Обновил файл планов работ (todo.txt) - забыл пометить там выполненные пункты.
Вынес функцию GetHiBit в заголовочный файл класса CFsmCreator и применил в классе CFsmTest.
Переформатировал вывод в методе CFsmTest::TraceFsm: вместо отступа выдаётся позиция, в которой
найден шаблон, строка стала более читабельной.

19.01.2017
FSM memory requirements, plans, refactoring
Добавил в класс CFsmTest методы для получения объёмов таблиц автомата для случая по умолчанию и
для случая максимально компактной записи.
Устранил избыточные размеры массивов памяти для хранения таблиц в классе CFsmTest.
Добавил вывод всей информации об автомате.
Обновил планы.
-
Added #line directive to make __FILE__omit the path
Добавил во все файлы исходного кода директиву #line с имененм файла чтобы исключить путь к файлу
из переменной __FILE__.

26.01.2017
Refactoting CFsmTest
Переменил порядок членов в классе CFsmTest, выделил анализ шаблонов в отдельный метод.
-
Refactoring CFsmTest: extracting LCG
Выделил линейный-конгруэнтный генератор в отдельный класс CLcg.

27.01.2017
Refactoring: Common.h
Создал заголовочный файл Common.h для общих определений и типов.
Вынес в него определение структуры SPattern, описывающей искомые шаблоны, функции для работы
с ними, макрос BITS_IN_BYTE и функцию GetHiBit().
-
Bit FSM testing with shift registers
Написал проверку корректности работы битового поискового автомата при помощи регистра сдвига, в
который загоняются случайные данные.

31.01.2017
Testing: fix pack
Обнаружил, что байты, выдаваемые ЛКГ имеют период 2^23, то есть генерируется только 8 МиБ.
Переделал функцию получения байта из 15 "хорошо распределённых" битов - теперь период 256 МиБ.
Добавил класс с двумя ЛКГ, дающими в итоге очень большой период (теоретически 2^56).
Добавил вывод первых десяти "находок" при тестировании корректности работы автомата.
Переделал интерфейс функции CFsmTest::TestCorrectness - теперь туда передаётся количество байтов
для тестирования, а не битов - так проще и можно передавать большие объёмы в 32-битном счётчике.

01.02.2017
CWinTimer class for time measurement
Добавил класс CWinTimer для измерения времени работы алгоритмов.
-
FSM and register rate measurement
Добавил измерение скорости работы автомата и регистрового поиска.
-
CShiftRegister::TestPattern improved by table weight function
Ускорил работу регистра сдвига за счёт использования табличного метода вычисления веса вектора.
-
Speed test experiments
В файле SearchFSM/main.cpp дописал функции для тестирования скорости автоматов: функцию
TestSpeed(), проводящую измерения на конкретном наборе шаблонов, функцию TestOnPatterns, которая
генерирует заданное количество шаблонов заданной длины с указанием наличия маски и количества
допустимых ошибок и проводит измерения на них.
Провёл замеры на шаблонах без ошибок и маски следующих длин: 8, 28, 32, 48 и 65, в наборах от
одного до шести шаблонов.
Автомат работает быстрее и скорость его работы не зависит ни от длины шаблона, ни от их
количества, что радует :)

02.02.2017
Merge branch 'fsm-test' in repos
Conflicts: SearchFSM/FsmTest.h, SearchFSM/main.cpp, log.txt
-
In CFsmTest::TestCorrectness added parameter nPrintHits
Добавил в метод CFsmTest::TestCorrectness параметр, отвечающий за количество печатаемых вхождений
шаблонов.
-
Speed test results output in a table view
Реализовал сохранение результатов тестирования автоматов в специальную структуру STestResult.
Теперь при тестировании автоматов все результаты накапливаются в общую таблицу и по окончанию
тестов выводятся в удобном виде.
Добавил константу, задающую количество материала для быстрого тестирования корректности работы
поискового автомата перед замером скорости работы.
-
Comprehensive speed test in main.cpp
Сделал в main.cpp объёмный тест скорости с большим охватом различных комбинаций.
Сделал вывод сводных таблиц по мере окончания очередной группы тестов.

03.02.2017
CFsmCreator refactoring: more illustrative data model
Переделал структуру, описывающую состояние автомата в процессе построения: теперь вместо вектора
количества ошибок хранится набор найденных префиксов, что проще для понимания и для построения
хеш-значения состояния.

04.02.2017
Fix pack: #line directive, label to stderr, etc
Добавил в файл "SearchFSM/WinTimer.h" директиву #line, забытую ранее (для исключения пути к файлу
из макроса __FILE__).
Перед началом тестирования скорости автомата и регистра выводится количество данных, на которых
будет проводиться тестирование.
В функциях printf() шаблон "%g" заменён на "%Lg", поскольку используется тип long double
(обнаружил этот недостаток благодаря компилированию с помощью MinGW).
Перед началом каждого теста на экран выводится метка времени и параметры теста, вывод на экран
произойдёт даже при перенаправлении вывода в файл.
-
CFsmCreator refactoring: avoid redundant scope operator, etc.
Удалил избыточные операторы пространства имён (CFsmCreator::) в методах класса.
Провёл рефакторинг переписанного в спешке метода CFsmCreator::AreEqual.
-
MinGW warning removed: possible use of uninitialized variable
Понял, наконец, в чём проблема была у компилятора MinGW, который выдавал предупреждение.
Просто он не на ту строчку указывал :)
-
Made faster FSM creation with FSM state hashing
Добавил хеш-таблицу для состояний автомата на этапе построения.
Теперь построение большого автомата, которое раньше требовало больше часа, происходит за пару
минут.
В роли хеш-функции - полином с простым нечётным основанием степени 3571 и в некоторых случаях
1907.
Количество коллизий получается небольшое.

05.02.2017
CFsmCreator speed up, some fixes
Заменил некоторые члены класса CFsmCreator на QVector вместо QList.
Для автомата с 629'707 (6 случайных векторов по 48 битов с 4 ошибками) это дало прирост скорости
построения почти вдвое и снижение требований по памяти в 1,6 раза.
Количество хеш-коллизий в классе теперь подсчитывается без вывода на экран.
Также количество коллизий при построении автомата сохраняется в классе CFsmTest.
-
main.cpp: output, smart auto-tests
В клиенте (main.cpp) сделал вывод количества коллизий для автомата, если они есть.
Сделал более гибкие возможности ограничения объёма тестов в функции BunchTest.
Подобрал размеры тестов, для которых не происходит сбоя программы из-за нехватки памяти.
-
CFsmCreator::CreateByteTable for byte SearchFSM
Написал в классе CFsmCreator метод CreateByteTable для построения таблиц байтового автомата.
В байтовом автомате немного другая структура строки сводной таблицы автоматов, в остальном всё
точно так же.
Метод позволяет строить байтовые автоматы для различных длин байтов и для различных порядков
следования битов в байтах.
-
CSearchFsmByte - template class for byte SearchFSM
Написал шаблонный класс CSearchFsmByte для реализации байтового поискового автомата.
-
CFsmTest tests byte and nibble SearchFSM
В классе CFsmTest реализовал методы для преобразования и тестирования байтовых поисковых автоматов
на октетах (байтах по восемь битов) и нибблах (полубайтах по четыре бита).
Проверяется как корректность автоматов, так и их производительность.
В main.cpp добавлен вывод результатов измерения скорости работы указанных байтовых автоматов.
-
CFsmCreator releases state descriptions immediately after using
Класс CFsmCreator удаляет таблицы описания состояний сразу после построения сводной таблицы
переходов и выходов, поскольку они больше не нужны.

06.02.2017
Fix pack: NULL protection, byte table size, try-catch in main.cpp, output full tables
В методах CFsmTest::TestFsmNibbleRate и TestFsmByteRate сделал защиту на случай отсутствия
соответствующего автомата.
Зеализовал функции вычисления объёма таблиц байтового и полубайтового автоматов.
В функции TestSpeed защитил вызов функции создания автоматов SEH-фреймом, который, правда,
срабатывает не всегда.
Но иногда могут построиться не все автоматы, а только часть из них, зато программа не завершится
крахом.
Теперь выводится таблица со скоростью работы всех автоматов и объёмами всех таблиц.
Ещё сильнее урезаны некоторые тесты - памяти стало не хватать сильнее :(.

18.02.2017
CWinTimer: thread time divided into kernel and user modes, total time
Доработал класс CWinTimer: добавил измерение прошедшего времени безотносительно текущего потока,
измерение времени работы потока в режиме ядра и пользовательском.
Это позволит измерить степень использования ядра процессора, что тоже может пригодиться.

26.02.2017
CFsmTest: full usage of advanced CWinTimer
Создал структуру CFsmTest::SEnginePerformance, содержащую скорость обработки данных, степень
использования процессора и отдельно степень использования процессора в режиме ядра.
Переделал методы CFsmTest::TestFsmRate, TestFsmNibbleRate, TestFsmByteRate и TestRegisterRate так,
чтобы они возвращали эту структуру.
Стало очевиднее, что необходимо сделать шаблонный механизм измерения производительности различных
поисковых механизмов.
В main.cpp добавил вывод степени использования ЦП в целом и в режиме ядра ОС.
Провёл исследования: все механизмы используют ЦП практически на 95-100%, в режиме ядра 0% либо
пренебрежимо низкий процент (например, 0,000378406).

02.03.2017
Fix pack: structure initialization, reference return value
В методе CFsmCreator::GetTableRow сдел возврат значения по ссылке вместо возврата по значению.
Устранил несколько мелких недостатков: недостаточное количество инициализаторов структуры
в main.cpp.
-
Method CFsmCreator::CreateFsmWrap to create SearchFSM wrap and use it at once
В класс CFsmCreator добавил шаблонную структуру SFsmWrap<TSearchFsm>, которая позволит хранить
любой поисковый автомат вместе с их таблицами (пока проверено только для битовых автоматов).
Написан метод CFsmCreator::CreateFsmWrap() для создания такой структуры, что позволит переместить
весь процесс создания уже готового к работе автомата в класс CFsmCreator.
В шаблонных классах CSearchFsm и CSearchFsmByte параметры шаблона TStateIdx и TOutputIdx вынесены
в typedef чтобы была возможность использовать их во внешних шаблонных функциях и структурах.

30.03.2017
Hot-fix: bad constant in LCG: 13 bits instead of 15 bits!
Исправил опечатку в маске 15 битов в классе CLcg - вместо 15 битов использовались лишь 13 младших.
-
Compiled with MSVC (not completely compatible with g++)
Visual C++ не понимает конструкции вида (TWinTime){0, 0}, где TWinTime - имя структуры.
Поэтому проект не компилируется в среде Visual Studio.
Переделал.

31.03.2017
Refactoring in ShiftRegister: bool in TestPattern, default constructor, size requirements
Немного перестроил работу класса CShiftRegister: теперь в шаблоне хранится и предельное количество
ошибок, а метод CShiftRegister::TestPattern возвращает логическое значение вместо количества
ошибок.
Ещё добавил конструктор по умолчанию и метод инициализации.
Реализовал метод для определения объёма требуемой для регистра памяти.
Так удобнее организовать шаблонный тестер поисковых механизмов.

02.03-03.04.2017
Template method CFsmTest::TestEngine, implemented for register search
Создал структуру STimeings для подробных данных об использовании ресурсов процессора.
Расширил структуру SEnginePerformance для сохранения подробных данных о поисковых механизмах.
Пока она совместима с предыдущей версией, но старые данные помечены как устаревшие (obsolete).
Для единообразного тестирования поисковых механизмов написал шаблонный метод TestEngine,
замеряющий затраты на инициализацию механизма, количество найденных шаблонов, длину тестового
участка (в байтах), и затраты на саму работу механизма.
В качестве примера её использования написал метод TestRegisterRate2, основаный на классе
CRegisterSearch.
Попутно исправил ошибочное использование метода таймера GetThreadDuration вместо GetTotalDuration
в методах измерения времени работы разных поисковых механизмов.
В клиенте (main.cpp) добавил вызов новой функции TestRegisterRate2 и вывод её результатов.

03.04.2017
Try and bool in CFsmTest::TestEngine
Изменил интерфейс метода TestEngine: теперь он возвращает логическое значение, говорящее об успехе
тестирования, а результаты измерения возвращает по указателю.
Само тело метода поместил в блок try.
-
CFsmTest::TestFsmRate2 for speed tests on-the-fly
Написал метод CFsmTest::TestFsmRate2, который строит автомат и сразу его тестирует, не используя
при этом построенные ранее в классе CFsmTest автоматы.
На основе него сделаем класс для тестирования скорости поискового автомата.
Добавил вызов этого метода в клиенте.
-
CFsmTest::TestFsmRate2 based on TestEngine<>
Переделал метод тестирования битового автомата через шаблонный метод.
Пока коряво считается потребность по памяти (нужно тоже сделать шаблонный метод).
В клиенте выводится часть информации о потребностях в памяти и время, затраченное на построение
автомата.
-
Changed interface of TestFsmRate2 and TestRegisterRate2
Переделал интерфейс методов TestFsmRate2 и TestRegisterRate2 в соответствии с интерфейсом
шаблонного метода TestEngine.
Теперь в клиенте результаты выводятся только при успешном вызове методов.
-
Rename STableSize to SFsmTableSize, etc
Переименовал структуру STableSize в SFsmTableSize, перенёс её выше - для использования в структуре
SEnginePerformance, переименовал некоторые поля.
-
Added static field g_nColumnsCount to bit SearchFSM class CSearchFsm
Добавил в класс битового поискового автомата CSearchFsm поле g_nColumnsCount для унификации
с классом байтового поискового автомата CSearchFsmByte.
-
Engine test statistics refactoring
Сделал шаблонные статические методы GetTableSize и GetMinimalTableSize для вычисления потребностей
в памяти автоматов по имеющейся обёртке CFsmCreator::SFsmWrap.
Вынес автоматную статистику из структуры SEnginePerformance в отдельную структуру SFsmStatistics.
Реализовал заполнение новой статистики в структуру SEnginePerformance в шаблонном методе
тестирования.
Стало красивее и логичнее.
