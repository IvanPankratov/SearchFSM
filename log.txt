09.05.2016
Started
Начал разработку класса CFsmCreator для создания таблиц переходов и выходов поискового автомата.

11,12.05.2016
Transition table creation code (only prints), dumping method
Доделал построение таблиц переходов автомата (они выводятся на экран, но не сохраняются).
Таблица выходов не строится, но выводятся звёздочки, по которым можно определить количество
найденных шаблонов.
Добавлены методы для получения определённого бита двоичной последовательности и вывода описания
состояний.
-
Testing code in main.cpp
Добавил тестирующий код в main.cpp.

19.05.2016
Refactoring: optional pattern mask, output fix
Сделал удобные функции для доступа к битам шаблонов и масок - теперь маску можно не задавать, если
все биты шаблона существенны.
Изменил вывод состояний: для перфиксов вообще без ошибок теперь нуль не пишется.
-
Renamed FSM/ to SearchFSM/
Переименовал папку с проектом в SearchFSM.
-
Structure for FSM tables
Создал структуры для таблиц автомата.
Каждая ячейка таблицы будет иметь номер следующего состояния для перехода и список найденных
шаблонов для выхода автомата.
Информация о найденном шаблоне содержит его номер, количество ошибок и отступ от текущей позиции
автомата (равную длине шаблона).

23.05.2016
FSM tables storing, print output
Сохранение таблиц при их генерации, запоминание выхода вместе с новым состоянием.
Вывод на экран выхода автомата при соответствующем переходе.

24.05.2016
Methods for accessing created table
Добавил в класс CFsmCreator методы GetStatesCount и GetTableRow для доступа к построенной таблице.

06.06.2016
Came to the natural bit order, comments on it
Сделал для шаблонов естественный порядок битов: первый бит в старшем разряде байта, если последний
байт неполный, то его значащими являются младшие биты (соответствующее количество).
Написал подробный комментарий об этом перед определением структуры SPattern.

08.06.2016
Translated README into Russian
Добавил языковые ссылки и перевёл скудное пока описание (README.md) на русский язык.

11.06.2016
Created CSearchFsm template class for searching FSMs themselves
Написал шаблонный класс CSearchFsm для реализации функциональности самого поискового автомата.
Параметрами шаблона являются типы индексов состояний и выходов - для больших возможностей сделать
таблицы компактнее при небольшом количестве состояний или выходов.
Структуры таблиц самого поискового автомата отличаются от структур в классе создания таблиц.
В тестовом клиенте (main.cpp) частично реализовал переработку таблиц класса-создателя в таблицы
поискового автомата - пока без таблиц выхода.

13.06.2016
fsm-test: Began creating CFsmTest - class for testing FSMs
Начал создавать класс для тестирования автоматов CFsmTest.
Пока сделал обёртку для таблиц автомата, содержащую указатели на таблицы и сами таблицы в членах
типа QVector<>.
Таблицы выходов пока не трогал.
-
fsm-test: CFsmTest traces FSM running
В класс CFsmTest добавлен член CFsmTest::TestFsm, который подаёт на вход автомата случайные биты и
выводит на экран последовательность состояний.
Перед запуском автомата на экран выводятся тестовые шаблоны (в main.cpp).
Далее планируется добавить вывод выходов автомата.
-
Plans in todo.txt
Создал файл todo.txt с планами дальнейшей работы.
-
fsm-test: Merged master

28.12.2016
New plans in todo.txt
Добавил в планы описание исследовательской части работы.

30.12.2016
Refactoring plans
После долгой разлуки взглянул на проект свежим взглядом - многое хочется переделать.
Описал планы по рефакторингу дальнейшему.
-
fsm-test: output table, refactoring
Добавил в тестирующий класс автомата сохранение таблицы выходов и её использование при тестовом
прогоне автомата.
Добавил typedef для нескольких типов.
-
Merge branch 'master' into fsm-test
Conflicts: log.txt

06.01.2017
Rafactoring: field names etc.
В файле SearchFSM/FsmCreator.h вспомогательные структуры и типы поместил внутрь описания класса
CFsmCreator.
Поле SOutput::nPosition переименовал в nStepBack, что лучше описывает его смысл.
Исправил одно предупреждение компилятора MinGW, связанное с беззнаковостью числа.
Для самого класса автомата сделал типы полей patternIdx, stepBack и errorsCount
параметризованными на всякий случай.
-
Optional debug output in CFsmCreator::GenerateTables
Добавил в метод CFsmCreator::GenerateTables параметр fVerbose, подключающий отладочный вывод
только при необходимости.
-
Refactored CFsmTest to store the FSM in the members
В класс CFsmTest добавил сам построенный автомат.
Автомат теперь строится полностью в методе CFsmTest::CreateFsm по шаблонам.
Вынес количество подаваемых битов в методе CFsmTest::TestFsm в параметр.
Добавил комментарии, повысил качество кода.
Устранил предупреждения компилятора.

09.01.2017
Linear congruent generator for testing, clean-up etc.
Добавил в класс CFsmTest ЛКГ для тестирования работы автоматов и других методов поиска шаблонов.
Пробросил параметр fVerbose в метод CFsmTest::CreateFsm.
Удалил лишний вывод в main.cpp, добавил комментарии.
-
Refactoring: CFsmTest::TraceFsm, output, etc.
Переименовал CFsmTest::TestFsm в TraceFsm.
Вынес обнуление переменной ПСП в метод ResetLCG().
Обновил файл планов работ (todo.txt) - забыл пометить там выполненные пункты.
Вынес функцию GetHiBit в заголовочный файл класса CFsmCreator и применил в классе CFsmTest.
Переформатировал вывод в методе CFsmTest::TraceFsm: вместо отступа выдаётся позиция, в которой
найден шаблон, строка стала более читабельной.

19.01.2017
FSM memory requirements, plans, refactoring
Добавил в класс CFsmTest методы для получения объёмов таблиц автомата для случая по умолчанию и
для случая максимально компактной записи.
Устранил избыточные размеры массивов памяти для хранения таблиц в классе CFsmTest.
Добавил вывод всей информации об автомате.
Обновил планы.
-
Added #line directive to make __FILE__omit the path
Добавил во все файлы исходного кода директиву #line с имененм файла чтобы исключить путь к файлу
из переменной __FILE__.

26.01.2017
Refactoting CFsmTest
Переменил порядок членов в классе CFsmTest, выделил анализ шаблонов в отдельный метод.
-
Refactoring CFsmTest: extracting LCG
Выделил линейный-конгруэнтный генератор в отдельный класс CLcg.

27.01.2017
Refactoring: Common.h
Создал заголовочный файл Common.h для общих определений и типов.
Вынес в него определение структуры SPattern, описывающей искомые шаблоны, функции для работы
с ними, макрос BITS_IN_BYTE и функцию GetHiBit().
-
Bit FSM testing with shift registers
Написал проверку корректности работы битового поискового автомата при помощи регистра сдвига, в
который загоняются случайные данные.

31.01.2017
Testing: fix pack
Обнаружил, что байты, выдаваемые ЛКГ имеют период 2^23, то есть генерируется только 8 МиБ.
Переделал функцию получения байта из 15 "хорошо распределённых" битов - теперь период 256 МиБ.
Добавил класс с двумя ЛКГ, дающими в итоге очень большой период (теоретически 2^56).
Добавил вывод первых десяти "находок" при тестировании корректности работы автомата.
Переделал интерфейс функции CFsmTest::TestCorrectness - теперь туда передаётся количество байтов
для тестирования, а не битов - так проще и можно передавать большие объёмы в 32-битном счётчике.

01.02.2017
CWinTimer class for time measurement
Добавил класс CWinTimer для измерения времени работы алгоритмов.
-
FSM and register rate measurement
Добавил измерение скорости работы автомата и регистрового поиска.
-
CShiftRegister::TestPattern improved by table weight function
Ускорил работу регистра сдвига за счёт использования табличного метода вычисления веса вектора.
-
Speed test experiments
В файле SearchFSM/main.cpp дописал функции для тестирования скорости автоматов: функцию
TestSpeed(), проводящую измерения на конкретном наборе шаблонов, функцию TestOnPatterns, которая
генерирует заданное количество шаблонов заданной длины с указанием наличия маски и количества
допустимых ошибок и проводит измерения на них.
Провёл замеры на шаблонах без ошибок и маски следующих длин: 8, 28, 32, 48 и 65, в наборах от
одного до шести шаблонов.
Автомат работает быстрее и скорость его работы не зависит ни от длины шаблона, ни от их
количества, что радует :)

02.02.2017
Merge branch 'fsm-test' in repos
Conflicts: SearchFSM/FsmTest.h, SearchFSM/main.cpp, log.txt
